_id: 3ece1ba0-0e9d-11e9-8664-319c2e140879
_parent: 17-cli_dict_input
name: Edwin
reply_to: 97eaa420-0d07-11e9-8664-319c2e140879
body: "Thanks for your reply! I really enjoy throwing this online and getting your two cents on it. First of all, your variable naming is obviously better, 'x' is not informative at all (I just happen to like the look of it, personally...). \r\n\r\nSecondly, I like how you pulled apart this unreadable one liner `commands.get(cmd, lambda x: (error(input), help_message()))(args)`. As you maybe know, when I started this post this expression was way simpler, but along the way it became somewhat of a challenge to put as much stuff as possible in this one line... I didn't have the side-effect in there initially, but put it in later for fun, because I actually did not know before writing this post that you could pass a tuple of functions into a lambda like that. But again, no debate here that your version is a definite improvement! \r\n\r\nThirdly, your remark about dividing by one made me laugh (and cringe about myself a little bit). You actually made me go back to my code to think about why I define a lambda expression for a simple function call. I now know why: to prevent `help_message()` from always being executed immediately. But of course, like your code shows, instead of using a lambda, I should have just removed the parentheses and written `help_message` instead. Learned something here! \r\n\r\nFourthly, you are right that I don't care in this case that `read_cmd` has multiple purposes right now because this is a small silly program anyways. After your remarks about multiple purposes and side-effects, it totally makes sense that you replied with a Haskell script! Unfortunately, it looks like you forgot to include the link though ...\r\n\r\nThanks again! I learned something from your reply, which motivates me to keep making mistakes in the public eye ;-)"
date: 1546440414
