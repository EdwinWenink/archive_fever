_id: 97eaa420-0d07-11e9-8664-319c2e140879
_parent: 17-cli_dict_input
name: alex
reply_to: ''
body: "Neat!\r\nSmall notes:\r\n* `lambda _: func()` or `lambda x: func(x)` is pointless. It's the coders equivalent of dividing by 1 in languages where functions can be passed \U0001F604.\r\n* since your commands expect different inputs I would name them as such.\r\n* with error there's a side-effect in your lambda. if you _have_ to use side-effects, try and push those down the call-stack. It makes your programs easier to reason about.\r\n\r\nIf you were to apply all these changes the code would look something like this:\r\n```python\r\ndef error(incorrect_input):\r\n    print(\"\"\"\r\n    '%s' was an example of an incorrect command\r\n    \"\"\" % incorrect_input)\r\n    help_message()\r\n\r\n\r\ndef read_cmd(user_input):\r\n    inputs = user_input.split()\r\n    cmd = inputs[0]\r\n    args = inputs[1:]\r\n\r\n    commands = {\r\n        \"help\": help_message,\r\n        \"poem\": lambda muse: say_poem_for(muse[0]),\r\n        \"say\": lambda words: \" \".join(words),\r\n        \"exit\": lambda _: banner_say(\"Bye cruel world!\"),\r\n    }\r\n\r\n    command = commands.get(cmd, lambda _: error(user_input))\r\n    command(args)\r\n```\r\n* read_cmd has multiple purposes right now.\r\n\r\nPart is about how to interpret a command, part about how to interpret its arguments, and part about how to continue execution given a certain command. The application is trivially simple so it's no problem and actually more beneficial to keep it this short I'd argue. Nevertheless, healthy to keep in mind this is an undesirable property in most programs.\r\n\r\nFor fun, here's a haskell version. It makes little use of types, and overloads the `read_cmd` step to stay concise and close to the python version. Neither of which I'd normally recommend \U0001F609."
date: 1546266188
