_id: 5b17af00-d373-11ea-a360-6f00b702838a
_parent: 48-vim_fast_creating_and_linking_notes
name: Jared
reply_to: 2edc7bf0-859e-11ea-a16d-e7b30751e183
body: "A little bit that I added to the fzf function that maybe someone will find useful. (everything before put, the first five lines, is exactly the same)\r\n\r\n\r\n```\r\nfu! HandleFZF(file)\r\n    let filename = fnameescape(fnamemodify(a:file, \":t\"))\r\n    let filename_wo_timestamp = fnameescape(fnamemodify(a:file, \":t:s/^[0-9]*-//\"))\r\n    let mdlink = \"[ \".filename_wo_timestamp.\" ]( \".filename.\" )\"\r\n    put=mdlink\r\n    let curfilename = fnameescape(expand(\"%:t\"))\r\n    let curfilename_wo_timestamp = fnameescape(fnamemodify(expand(\"%\"), \":t:s/^[0-9]*-//\"))\r\n    let curmdlink = \"[ \".curfilename_wo_timestamp.\" ]( \".curfilename.\" )\"\r\n    call writefile(add(readfile(filename), curmdlink), filename)\r\nendfunction\r\n```\r\n\r\nIn short this is two way linking. So if file A is open and we insert a link to file B with the script[ B ](20200731-B.md) my addition would also read B and append to the file a link to file A [ A ](20200728-A.md)\r\n\r\nFor the uninitiated the % in vim represents the current file, but when using it in a function it is treated differently so you have to use the expand function to expand the variable to the filename. The final line is the one that does the writing to the other file. readfile grabs the contents of a file and turns it into a list object. Add appends to a list, and writefile takes a list and writes it to a file.\r\n\r\nFinal bit you could also use the file completion mapping to call the function (though I would recommend moving your things to a ftplugin file then so it doesn't map it that way everywhere). Basically for our fzf function that would look like this. (the <buffer> only works inside ftplugin so if you put this in your general vimrc remove the <buffer>)\r\n\r\n```\r\ninoremap <buffer> <C-X><C-F> <esc>:call fzf#run({'sink': 'HandleFZF'})<CR>A\r\n\r\n```\r\n\r\nAlso an alternate way of doing your new zettel command could be to do this instead.\r\n```\r\n cnoremap :nz e /home/edwin/Notes/Zettelkasten/<c-r>=strftime(\"%Y%m%d%H%M\")<CR>-\r\n```\r\n\r\nI prefer this way because I am used to hitting : to deal with files, rather than my leader key which I use to do other things. There are some slight drawbacks in comparison. For one if you type nz anywhere in the command line it will replace the nz with the whole command. Could be annoying if you have notes on New Zealand. Second you would still have to type .md but I know I would do that anyway if I used your command and I would end up with a lot of files ending with .md.md.\r\n\r\nJust to break one thing down for those that don't know it Ctrl-r is how you access your registers (where you copy paste from) when you aren't in normal mode. and the \"=\" register just takes a function and pastes the output in place. \r\n\r\nPersonally I write my notes before I am ready to save them and I am already in the directory so mine looks like this.\r\n\r\n```\r\ncnoremap :wt w <c-r>=strftime(\"%Y%m%d%H%M\")<CR>-\r\n```"
date: 1596230299
